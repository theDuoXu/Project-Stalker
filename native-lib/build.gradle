import projectstalker.build.CompileCudaTask

plugins {
    id 'cpp-library'
}
def cudaHome = '/usr/local/cuda'

library {
    publicHeaders.from('src/main/cpp/include')
    baseName = 'manning_solver'
}

// Librerías para JNI y CUDA
tasks.withType(CppCompile) {
    def javaHome = System.getenv("JAVA_HOME")
    if (javaHome) {
        compilerArgs.add "-I${javaHome}/include"
        compilerArgs.add "-I${javaHome}/include/linux"
    } else {
        logger.warn("JAVA_HOME is not set. C++ compilation might fail to find JNI headers.")
        logger.warn("JAVA_HOME is set to default /usr/lib/jvm/java-21-openjdk-amd64")
        javaHome = "/usr/lib/jvm/java-21-openjdk-amd64"
        compilerArgs.add "-I${javaHome}/include"
        compilerArgs.add "-I${javaHome}/include/linux"

    }
    compilerArgs.add "-I${cudaHome}/include"
}

// 1. REGISTRAR NUESTRA TAREA DE CUDA
def compileCuda = tasks.register('compileCuda', CompileCudaTask) {
    description = 'Compila los archivos .cu en archivos objeto .o'
    group = 'build'
    sourceDir.set(project.file('src/main/cpp/src'))
    // IMPORTANTE: Ponemos los .o en un directorio único
    outputDir.set(project.layout.buildDirectory.dir('obj/cuda'))
}

// 2. CONECTAR
// ---
// Obtenemos un 'Provider' que apuntará al archivo manning_kernel.o
// Esto asume que tu CompileCudaTask SIEMPRE produce un archivo llamado 'manning_kernel.o'
// ---
def manningKernelObjectFile = compileCuda.map { task ->
    // 'task' es tu CompileCudaTask
    // 'outputDir' es la DirectoryProperty
    // Buscamos el archivo .o específico dentro de ese directorio
    task.outputDir.file("manning_kernel.o").get().asFile
}

// Configuramos las dependencias de enlace para *ambos* binarios (debug y release)
library.binaries.configureEach { binary ->
    // Obtenemos la tarea de enlace específica (ej. 'linkDebug')
    def linkTask = binary.linkTask.get()

    // --- LA CONEXIÓN CLAVE ---
    // Añadimos el PATH ABSOLUTO a nuestro .o como un argumento
    // directo para el enlazador (g++).
    linkTask.linkerArgs.add(manningKernelObjectFile.map { it.absolutePath })
    // --- FIN DE LA CONEXIÓN ---

    // Añadimos las librerías de runtime de CUDA (como antes)
    linkTask.linkerArgs.add("-L${cudaHome}/lib64")
    linkTask.linkerArgs.add('-lcudart')

    // Mantenemos la dependencia explícita
    linkTask.dependsOn(compileCuda)
}